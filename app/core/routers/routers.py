"""
The file responsible for use commands in bot
"""
from datetime import datetime

from aiogram import Bot, F, Router
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, FSInputFile, InputMediaPhoto, Message
from aiogram.utils.deep_linking import create_start_link
from aioredis import Redis
from sqlalchemy.orm import sessionmaker

from app.core.database import User
from app.core.keyboards.inline import (get_confirm_or_reject_keyboard,
                                       get_donate_menu,
                                       get_first_back_reserve_menu,
                                       get_main_back_menu, get_main_menu,
                                       get_subscription_actions)
from app.core.states.storage import Form

router = Router()
redis = Redis()


def get_datetime() -> str:
    return str(datetime.now())


@router.message(Command(commands=["start"]))
async def start(message: Message, session_maker: sessionmaker) -> None:
    await redis.set(str(message.from_user.id), get_datetime(), nx=True)
    await redis.sadd("users_count", str(message.from_user.id))

    async with session_maker() as session:
        async with session.begin():
            session.add(
                User(
                    user_id=int(message.from_user.id),
                    user_name=str(message.from_user.first_name)

                )
            )
            await session.commit()

    await message.answer_photo(
        photo=FSInputFile(
            "C:/Users/Zemik/Documents/GitHub/controller/app/assets/images/menu.png"
        ),
        reply_markup=get_main_menu()
    )


@router.callback_query(F.data == "actions_data")
async def start_reserve(query: CallbackQuery) -> None:
    await query.message.edit_media(
        media=InputMediaPhoto(
            media=FSInputFile(
                'C:/Users/Zemik/Documents/GitHub/controller/app/assets/images/menu.png'
            ),
            caption="<b>üóÇÔ∏è –ö–∞—Ç–∞–ª–æ–≥ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫:</b>\n\n"
                    "–£ –≤–∞—Å –Ω–µ –∏–º–µ–µ—Ç—Å—è <b>–∞–∫—Ç–∏–≤–Ω—ã—Ö</b> –ø–æ–¥–ø–∏—Å–æ–∫ ü§∑‚Äç‚ôÇÔ∏è"
        ),
        reply_markup=get_subscription_actions(),
    )
    await query.answer()


@router.callback_query(F.data == "add_data")  # –î–æ–±–∞–≤–∏—Ç—å
async def add_title_subscription(query: CallbackQuery, state: FSMContext) -> None:
    await query.message.edit_media(
        media=InputMediaPhoto(
            media=FSInputFile(
                'C:/Users/Zemik/Documents/GitHub/controller/app/assets/images/menu.png'
            ),
            caption="‚Äî –ö–∞–∫ –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è <b>—Å–µ—Ä–≤–∏—Å</b> –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –≤—ã <b>–ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å</b>?\n\n"
                    "<b>–ü—Ä–∏–º–µ—Ä:</b> <code>Tinkoff Premium</code>"
        )
    )

    await state.set_state(Form.service)
    await query.answer()


@router.message(Form.service)
async def add_months_subscription(message: Message, state: FSMContext) -> None:
    await state.update_data(title=message.text)
    await message.answer(
        text="‚Äî –°–∫–æ–ª—å–∫–æ <b>–º–µ—Å—è—Ü–µ–≤</b> –±—É–¥–µ—Ç –¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫–∞?\n\n"
             "<b>–ü—Ä–∏–º–µ—Ä:</b> <code>12 (–º–µ—Å.)</code>",
    )
    await state.set_state(Form.months)


@router.message(Form.months)
async def add_deadline_subscription(message: Message, state: FSMContext) -> None:
    await state.update_data(months=message.text)

    if message.text.isdigit() and int(message.text) != 0 and int(message.text) <= 12:
        # TODO ‚ö†Ô∏è –ù–µ –±–æ–ª—å—à–µ 12 –º–µ—Å—è—Ü–µ–≤
        pass
    else:
        await message.answer(text="<b>üö´ –û—à–∏–±–∫–∞:</b> –ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã")
        return

    await state.set_state(Form.reminder)
    await message.answer(
        text="‚Äî –í –∫–∞–∫—É—é <b>–¥–∞—Ç—É</b> –ø—Ä–æ–∏–∑–æ–π–¥–µ—Ç —Å–ø–∏—Å–∞–Ω–∏–µ —Å—Ä–µ–¥—Å—Ç–≤?\n\n"
             "<b>–ü—Ä–∏–º–µ—Ä:</b> <code>12.12.2023</code>"
    )


@router.message(Form.reminder)
async def add_reminder_subscription(message: Message, state: FSMContext) -> None:
    await state.update_data(deadline=message.text)

    try:
        datetime.strptime(message.text, '%d.%m.%Y')
        pass
    except ValueError:
        await message.answer(text="<b>üö´ –û—à–∏–±–∫–∞:</b> –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç")
        return

    await state.set_state(Form.deadline)
    await message.answer(
        text="‚Äî –ó–∞ —Å–∫–æ–ª—å–∫–æ <b>–¥–Ω–µ–π</b> –æ–ø–æ–≤–µ—â–∞—Ç—å –æ –±–ª–∏–∂–∞–π—à–µ–º —Å–ø–∏—Å–∞–Ω–∏–∏?\n\n"
             "<b>–ü—Ä–∏–º–µ—Ä:</b> <code>2 (–¥.)</code>"
    )


@router.message(Form.deadline)
async def viewing_results(message: Message, state: FSMContext) -> None:
    await state.update_data(reminder=message.text)
    user_data = await state.get_data()

    if message.text.isdigit() and int(message.text) != 0 and int(message.text) <= 7:
        pass
    else:
        await message.answer(text="<b>üö´ –û—à–∏–±–∫–∞:</b> –ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã")
        return

    await message.answer(
        text="üì© –ü—Ä–æ–≤–µ—Ä—å—Ç–µ <b>–ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å</b> –≤–≤–µ–¥—ë–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:\n\n"
             f"<b>–°–µ—Ä–≤–∏—Å:</b> <code>{user_data['title']}</code>\n"
             f"<b>–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:</b> <code>{user_data['months']} (–º–µ—Å.)</code>\n"
             f"<b>–û–∫–æ–Ω—á–∞–Ω–∏–µ:</b> <code>{user_data['deadline']}</code>\n"
             f"<b>–û–ø–æ–≤–µ—Å—Ç–∏—Ç—å –∑–∞</b> <code>{user_data['reminder']} (–¥.)</code>",
        reply_markup=get_confirm_or_reject_keyboard()
    )


@router.callback_query(F.data == "confirm_data")
async def confirm_result(query: CallbackQuery, state: FSMContext) -> None:
    await query.message.edit_text(
        text="<b>‚úÖ –£—Å–ø–µ—Ö:</b> –î–∞–Ω–Ω—ã–µ –±—ã–ª–∏ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω—ã",
        reply_markup=get_first_back_reserve_menu()
    )
    await state.clear()
    await query.answer()


@router.callback_query(F.data == "reject_data")
async def overwriting_data(query: CallbackQuery, state: FSMContext) -> None:
    await query.message.edit_text(
        text="‚Äî –ö–∞–∫ –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è <b>—Å–µ—Ä–≤–∏—Å</b> –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –≤—ã <b>–ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å</b>?\n\n"
             "<b>–ü—Ä–∏–º–µ—Ä:</b> <code>Tinkoff Pro</code>"
    )
    await state.clear()
    await state.set_state(Form.service)
    await query.answer()


@router.callback_query(F.data == "first_back_data")
async def start_second_reserve(query: CallbackQuery) -> None:
    await query.message.edit_media(
        media=InputMediaPhoto(
            media=FSInputFile(
                'C:/Users/Zemik/Documents/GitHub/controller/app/assets/images/menu.png'
            ),
            caption="<b>üóÇÔ∏è –ö–∞—Ç–∞–ª–æ–≥ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫:</b>\n\n"
                    "–£ –≤–∞—Å –Ω–µ –∏–º–µ–µ—Ç—Å—è <b>–∞–∫—Ç–∏–≤–Ω—ã—Ö</b> –ø–æ–¥–ø–∏—Å–æ–∫ ü§∑‚Äç‚ôÇÔ∏è"
        ),
        reply_markup=get_subscription_actions(),
    )
    await query.answer()


@router.callback_query(F.data == "back_data")
async def start_first_reserve(query: CallbackQuery) -> None:
    await query.message.edit_media(
        media=InputMediaPhoto(
            media=FSInputFile(
                'C:/Users/Zemik/Documents/GitHub/controller/app/assets/images/menu.png'
            )
        ),
        reply_markup=get_main_menu()
    )
    await query.answer()


@router.callback_query(F.data == "account_data")
async def account_data(query: CallbackQuery, bot: Bot) -> None:
    date = await redis.get(str(query.from_user.id))
    link = await create_start_link(bot=bot, payload=str(query.from_user.id), encode=True)

    await query.message.edit_media(
        media=InputMediaPhoto(
            media=FSInputFile(
                'C:/Users/Zemik/Documents/GitHub/controller/app/assets/images/menu.png'
            ),
            caption=f"<b>üÜî –í–∞—à ID:</b> <code>{query.from_user.id}</code>\n"
                    f"<b>üìÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è:</b> <code>{str(date, 'utf-8')[:-7]}</code>\n"
                    f"<b>üë• –ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ:</b> <code>5 (—á–µ–ª.)</code>\n\n"
            # #202 –†–µ–¥–∏—Å–∫–∞ —Å—á–∏—Ç–∞–µ—Ç –∫–æ–ª-–≤–æ –ø–µ—Ä–µ—Ö–æ–¥–æ–≤ –ø–æ —Å—Å—ã–ª–∫–µ –∏ –≤—ã–≤–æ–¥–∏—Ç –∑–Ω–∞—á–µ–Ω–∏–µ
                    f"<b>üîó –í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:</b>\n"
                    f"<code>{link}</code>"
        ),
        reply_markup=get_main_back_menu(),
    )
    await query.answer()


@router.callback_query(F.data == "donate_data")
async def author_support(query: CallbackQuery) -> None:
    await query.message.edit_media(
        media=InputMediaPhoto(
            media=FSInputFile(
                'C:/Users/Zemik/Documents/GitHub/controller/app/assets/images/menu.png'
            )
        ),
        reply_markup=get_donate_menu()
    )
    await query.answer()


@router.callback_query(F.data == "statistics_data")
async def users_statistics(query: CallbackQuery) -> None:
    # users = await redis.scard("users_count")
    pass
    await query.answer()
