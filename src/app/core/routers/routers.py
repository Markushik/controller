"""
The file responsible for use commands in bot
"""

from datetime import datetime

from aiogram import Bot, F, Router
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import (CallbackQuery, ContentType, FSInputFile,
                           InputMediaPhoto, Message)
from aiogram.utils.deep_linking import create_start_link
from aioredis import Redis
from sqlalchemy import select
from sqlalchemy.exc import NoResultFound, ProgrammingError
from sqlalchemy.orm import sessionmaker

from src.app.core.database.tables import Service, User
from src.app.core.keyboards.inline import (get_confirm_or_reject_keyboard,
                                       get_donate_menu,
                                       get_first_back_reserve_menu,
                                       get_main_back_menu, get_main_menu,
                                       get_subscription_actions)
from src.app.core.states.user import UserForm

router = Router()
redis = Redis()


def get_datetime() -> str:
    return str(datetime.now())


async def get_user(user_id: int, session_maker: sessionmaker) -> User:
    async with session_maker() as session:
        async with session.begin():
            result = await session.execute(
                select(User)
                .filter(User.user_id == user_id)
            )
            return result.scalars().one()


async def create_user(user_id: int, username: str, session_maker: sessionmaker) -> None:
    async with session_maker() as session:
        async with session.begin():
            session.add(
                User(
                    user_id=user_id,
                    username=username

                )
            )
            await session.commit()


@router.message(Command(commands=["start"]))
async def start(message: Message, session_maker: sessionmaker) -> None:
    await redis.set(str(message.from_user.id), get_datetime(), nx=True)
    await redis.sadd("users_count", str(message.from_user.id))

    try:
        await get_user(message.from_user.id, session_maker)
    except (ProgrammingError, NoResultFound):
        await create_user(message.from_user.id, message.from_user.first_name, session_maker)

    await message.answer_photo(
        photo=FSInputFile(
            "C:/Users/Zemik/PycharmProjects/controller/assets/images/main-menu.png"
        ),
        reply_markup=get_main_menu(),
    )


@router.callback_query(F.data == "actions_data")
async def start_reserve(query: CallbackQuery) -> None:
    await query.message.edit_media(
        media=InputMediaPhoto(
            media=FSInputFile(
                "C:/Users/Zemik/PycharmProjects/controller/assets/images/main-menu.png"
            ),
            caption="<b>üóÇÔ∏è –ö–∞—Ç–∞–ª–æ–≥ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫:</b>\n\n"
                    "–£ –≤–∞—Å –Ω–µ –∏–º–µ–µ—Ç—Å—è <b>–∞–∫—Ç–∏–≤–Ω—ã—Ö</b> –ø–æ–¥–ø–∏—Å–æ–∫ ü§∑‚Äç‚ôÇÔ∏è",
        ),
        reply_markup=get_subscription_actions(),
    )
    await query.answer()


@router.callback_query(F.data == "add_data")  # –î–æ–±–∞–≤–∏—Ç—å
async def add_title_subscription(query: CallbackQuery, state: FSMContext) -> None:
    await query.message.edit_media(
        media=InputMediaPhoto(
            media=FSInputFile(
                "C:/Users/Zemik/PycharmProjects/controller/assets/images/main-menu.png"
            ),
            caption="‚Äî –ö–∞–∫ –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è <b>—Å–µ—Ä–≤–∏—Å</b> –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –≤—ã <b>–ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å</b>?\n\n"
                    "<b>–ü—Ä–∏–º–µ—Ä:</b> <code>Tinkoff Premium</code>",
        )
    )

    await state.set_state(UserForm.service)
    await query.answer()


@router.message(UserForm.service)
async def add_months_subscription(message: Message, state: FSMContext) -> None:
    await state.update_data(title=message.text)
    await message.answer(
        text="‚Äî –°–∫–æ–ª—å–∫–æ <b>–º–µ—Å—è—Ü–µ–≤</b> –±—É–¥–µ—Ç –¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫–∞?\n\n"
             "<b>–ü—Ä–∏–º–µ—Ä:</b> <code>12 (–º–µ—Å.)</code>",
    )
    await state.set_state(UserForm.months)


@router.message(UserForm.months)
async def add_deadline_subscription(message: Message, state: FSMContext) -> None:
    await state.update_data(months=message.text)

    if message.text.isdigit() and int(message.text) != 0 and int(message.text) <= 12:
        pass
    else:
        await message.answer(text="<b>üö´ –û—à–∏–±–∫–∞:</b> –ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã")
        return

    await state.set_state(UserForm.reminder)
    await message.answer(
        text="‚Äî –í –∫–∞–∫—É—é <b>–¥–∞—Ç—É</b> –ø—Ä–æ–∏–∑–æ–π–¥–µ—Ç —Å–ø–∏—Å–∞–Ω–∏–µ —Å—Ä–µ–¥—Å—Ç–≤?\n\n"
             "<b>–ü—Ä–∏–º–µ—Ä:</b> <code>12-12-2023</code>"
    )


@router.message(UserForm.reminder)
async def add_reminder_subscription(message: Message, state: FSMContext) -> None:
    await state.update_data(deadline=message.text)

    try:
        datetime.strptime(message.text, "%d-%m-%Y")
        pass
    except ValueError:
        await message.answer(text="<b>üö´ –û—à–∏–±–∫–∞:</b> –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç")
        return

    await state.set_state(UserForm.deadline)
    await message.answer(
        text="‚Äî –ó–∞ —Å–∫–æ–ª—å–∫–æ <b>–¥–Ω–µ–π</b> –æ–ø–æ–≤–µ—â–∞—Ç—å –æ –±–ª–∏–∂–∞–π—à–µ–º —Å–ø–∏—Å–∞–Ω–∏–∏?\n\n"
             "<b>–ü—Ä–∏–º–µ—Ä:</b> <code>2 (–¥.)</code>"
    )


@router.message(UserForm.deadline)
async def viewing_results(message: Message, state: FSMContext) -> None:
    await state.update_data(reminder=message.text)
    user_data = await state.get_data()

    if message.text.isdigit() and int(message.text) != 0 and int(message.text) <= 7:
        pass
    else:
        await message.answer(text="<b>üö´ –û—à–∏–±–∫–∞:</b> –ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã")
        return

    await message.answer(
        text="üì© –ü—Ä–æ–≤–µ—Ä—å—Ç–µ <b>–ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å</b> –≤–≤–µ–¥—ë–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:\n\n"
             f"<b>–°–µ—Ä–≤–∏—Å:</b> <code>{user_data['title']}</code>\n"
             f"<b>–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:</b> <code>{user_data['months']} (–º–µ—Å.)</code>\n"
             f"<b>–û–∫–æ–Ω—á–∞–Ω–∏–µ:</b> <code>{user_data['deadline']}</code>\n"
             f"<b>–û–ø–æ–≤–µ—Å—Ç–∏—Ç—å –∑–∞</b> <code>{user_data['reminder']} (–¥.)</code>",
        reply_markup=get_confirm_or_reject_keyboard(),
    )


@router.callback_query(F.data == "confirm_data")
async def confirm_result(
        query: CallbackQuery, state: FSMContext, session_maker: sessionmaker
) -> None:
    user_data = await state.get_data()

    await query.message.edit_text(
        text="<b>‚úÖ –£—Å–ø–µ—Ö:</b> –î–∞–Ω–Ω—ã–µ –±—ã–ª–∏ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω—ã",
        reply_markup=get_first_back_reserve_menu(),
    )

    async with session_maker() as session:
        async with session.begin():
            session.add(
                Service(
                    service=str(user_data["title"]),
                    months=int(user_data["months"]),
                    deadline=str(user_data["deadline"]),
                    reminder=int(user_data["reminder"]),
                )
            )
            await session.commit()

    await state.clear()
    await query.answer()


@router.callback_query(F.data == "reject_data")
async def overwriting_data(query: CallbackQuery, state: FSMContext) -> None:
    await query.message.edit_text(
        text="‚Äî –ö–∞–∫ –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è <b>—Å–µ—Ä–≤–∏—Å</b> –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –≤—ã <b>–ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å</b>?\n\n"
             "<b>–ü—Ä–∏–º–µ—Ä:</b> <code>Tinkoff Pro</code>"
    )
    await state.clear()
    await state.set_state(UserForm.service)
    await query.answer()


@router.callback_query(F.data == "first_back_data")
async def start_second_reserve(query: CallbackQuery) -> None:
    await query.message.edit_media(
        media=InputMediaPhoto(
            media=FSInputFile(
                "C:/Users/Zemik/PycharmProjects/controller/assets/images/main-menu.png"
            ),
            caption="<b>üóÇÔ∏è –ö–∞—Ç–∞–ª–æ–≥ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫:</b>\n\n"
                    "–£ –≤–∞—Å –Ω–µ –∏–º–µ–µ—Ç—Å—è <b>–∞–∫—Ç–∏–≤–Ω—ã—Ö</b> –ø–æ–¥–ø–∏—Å–æ–∫ ü§∑‚Äç‚ôÇÔ∏è",
        ),
        reply_markup=get_subscription_actions(),
    )
    await query.answer()


@router.callback_query(F.data == "back_data")
async def start_first_reserve(query: CallbackQuery) -> None:
    await query.message.edit_media(
        media=InputMediaPhoto(
            media=FSInputFile(
                "C:/Users/Zemik/PycharmProjects/controller/assets/images/main-menu.png"
            )
        ),
        reply_markup=get_main_menu(),
    )
    await query.answer()


@router.callback_query(F.data == "account_data")
async def account_data(query: CallbackQuery, bot: Bot) -> None:
    date = await redis.get(str(query.from_user.id))
    link = await create_start_link(
        bot=bot, payload=str(query.from_user.id), encode=True
    )

    await query.message.edit_media(
        media=InputMediaPhoto(
            media=FSInputFile(
                "C:/Users/Zemik/PycharmProjects/controller/assets/images/main-menu.png"
            ),
            caption=f"<b>üÜî –í–∞—à ID:</b> <code>{query.from_user.id}</code>\n"
                    f"<b>üìÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è:</b> <code>{str(date, 'utf-8')[:-7]}</code>\n"
                    f"<b>üë• –ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ:</b> <code>5 (—á–µ–ª.)</code>\n\n"
            # #202 –†–µ–¥–∏—Å–∫–∞ —Å—á–∏—Ç–∞–µ—Ç –∫–æ–ª-–≤–æ –ø–µ—Ä–µ—Ö–æ–¥–æ–≤ –ø–æ —Å—Å—ã–ª–∫–µ –∏ –≤—ã–≤–æ–¥–∏—Ç –∑–Ω–∞—á–µ–Ω–∏–µ
                    f"<b>üîó –í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:</b>\n" f"<code>{link}</code>",
        ),
        reply_markup=get_main_back_menu(),
    )
    await query.answer()


@router.callback_query(F.data == "donate_data")
async def author_support(query: CallbackQuery) -> None:
    await query.message.edit_media(
        media=InputMediaPhoto(
            media=FSInputFile(
                "C:/Users/Zemik/PycharmProjects/controller/assets/images/main-menu.png"
            )
        ),
        reply_markup=get_donate_menu(),
    )
    await query.answer()


@router.message(F.content_type_in(ContentType.WEB_APP_DATA))
async def users_statistics(query: CallbackQuery) -> None:
    # users = await redis.scard("users_count")
    pass
    await query.answer()
